{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mixture \u00b6 Mixin classes for great objects ! Creating mixin classes is a quite elegant way to design reusable object-oriented code in python. Doing it right might be tricky as python provides many alternate ways. This library provides an @apply_mixins decorator for those users wishing to avoid inheritance at all when mixing classes (TODO) a few reusable mix-in class work in progress Installing \u00b6 > pip install mixture Usage \u00b6 1. Mix-in basics \u00b6 a- Defining \u00b6 A mix-in class in python is typically a class : without __init__ constructor (to avoid constructor inheritance hell in case of multiple inheritance), providing a set of instance/static/class methods to provide some functionality. This functionality may be based on the existence of certain fields. that may also include class attributes . This can be used to explicitly add a field to an object without defining an __init__ method, as we'll see below) without parent classes, or where the parent classes are mix-in classes themselves For example this is a very basic mix-in class without any requirement on instance attributes: class BarkerMixin : def bark ( self ): print ( \"barking loudly\" ) Thanks to pyfields , we can easily create mix-in classes that include fields definitions without defining a constructor: from pyfields import field class TweeterMixin : afraid = field ( default = False , doc = \"Status of the tweeter. When this is `True`,\" \"tweets will be less aggressive.\" ) def tweet ( self ): how = \"lightly\" if self . afraid else \"loudly\" print ( \"tweeting %s \" % how ) See pyfields documentation for details. Alternatives for class-level field definition You can obviously use more advanced libraries such as attrs or dataclasses but be aware that by default they create an __init__ method for you. The intent here is to provide a \"minimal viable product\" to define class-level fields without creating __init__ methods. b- Mixing \u00b6 In python we can already use such mixin classes without additional framework, simply by inheriting from them thanks to python's multiple inheritance capabilities: class MagicDuck ( BarkerMixin , TweeterMixin ): pass Let's try it by creating a barking and tweeting duck: >>> d = MagicDuck () >>> d . bark () barking loudly >>> d . tweet () tweeting loudly >>> d . afraid = True >>> d . tweet () tweeting lightly In addition, this library provides a way to apply mixin classes without inheritance . The author does not have any opinion on this alternative, it may be marginally faster as the MRO cost is not paid for accessing members, but this would have to be studied (if you're interested, please discuss it here ). from mixture import apply_mixins @apply_mixins ( BarkerMixin , TweeterMixin ) class MagicDuck : pass in that case a special field is set on the class for reference, containing the list of all members that were created as the result of copying from mixins: >>> MagicDuck . __from_mixins__ ( 'tweet' , 'afraid' , 'bark' ) and if the mixin is an Abstract Base Class , the decorated class is registered as a virtual subclass so that isinstance and issubclass still work as expected. 2. Handy Mix-in classes \u00b6 TODO Main features / benefits \u00b6 optionally apply mix-ins without inheritance thanks to @apply_mixins add features quickly to your classes thanks to the provided library of mixins See Also \u00b6 This library was inspired by: pymixin attrs dataclasses autoclass Others \u00b6 Do you like this library ? You might also like my other python libraries Want to contribute ? \u00b6 Details on the github page: https://github.com/smarie/python-mixture","title":"Home"},{"location":"#mixture","text":"Mixin classes for great objects ! Creating mixin classes is a quite elegant way to design reusable object-oriented code in python. Doing it right might be tricky as python provides many alternate ways. This library provides an @apply_mixins decorator for those users wishing to avoid inheritance at all when mixing classes (TODO) a few reusable mix-in class work in progress","title":"mixture"},{"location":"#installing","text":"> pip install mixture","title":"Installing"},{"location":"#usage","text":"","title":"Usage"},{"location":"#1-mix-in-basics","text":"","title":"1. Mix-in basics"},{"location":"#a-defining","text":"A mix-in class in python is typically a class : without __init__ constructor (to avoid constructor inheritance hell in case of multiple inheritance), providing a set of instance/static/class methods to provide some functionality. This functionality may be based on the existence of certain fields. that may also include class attributes . This can be used to explicitly add a field to an object without defining an __init__ method, as we'll see below) without parent classes, or where the parent classes are mix-in classes themselves For example this is a very basic mix-in class without any requirement on instance attributes: class BarkerMixin : def bark ( self ): print ( \"barking loudly\" ) Thanks to pyfields , we can easily create mix-in classes that include fields definitions without defining a constructor: from pyfields import field class TweeterMixin : afraid = field ( default = False , doc = \"Status of the tweeter. When this is `True`,\" \"tweets will be less aggressive.\" ) def tweet ( self ): how = \"lightly\" if self . afraid else \"loudly\" print ( \"tweeting %s \" % how ) See pyfields documentation for details. Alternatives for class-level field definition You can obviously use more advanced libraries such as attrs or dataclasses but be aware that by default they create an __init__ method for you. The intent here is to provide a \"minimal viable product\" to define class-level fields without creating __init__ methods.","title":"a- Defining"},{"location":"#b-mixing","text":"In python we can already use such mixin classes without additional framework, simply by inheriting from them thanks to python's multiple inheritance capabilities: class MagicDuck ( BarkerMixin , TweeterMixin ): pass Let's try it by creating a barking and tweeting duck: >>> d = MagicDuck () >>> d . bark () barking loudly >>> d . tweet () tweeting loudly >>> d . afraid = True >>> d . tweet () tweeting lightly In addition, this library provides a way to apply mixin classes without inheritance . The author does not have any opinion on this alternative, it may be marginally faster as the MRO cost is not paid for accessing members, but this would have to be studied (if you're interested, please discuss it here ). from mixture import apply_mixins @apply_mixins ( BarkerMixin , TweeterMixin ) class MagicDuck : pass in that case a special field is set on the class for reference, containing the list of all members that were created as the result of copying from mixins: >>> MagicDuck . __from_mixins__ ( 'tweet' , 'afraid' , 'bark' ) and if the mixin is an Abstract Base Class , the decorated class is registered as a virtual subclass so that isinstance and issubclass still work as expected.","title":"b- Mixing"},{"location":"#2-handy-mix-in-classes","text":"TODO","title":"2. Handy Mix-in classes"},{"location":"#main-features-benefits","text":"optionally apply mix-ins without inheritance thanks to @apply_mixins add features quickly to your classes thanks to the provided library of mixins","title":"Main features / benefits"},{"location":"#see-also","text":"This library was inspired by: pymixin attrs dataclasses autoclass","title":"See Also"},{"location":"#others","text":"Do you like this library ? You might also like my other python libraries","title":"Others"},{"location":"#want-to-contribute","text":"Details on the github page: https://github.com/smarie/python-mixture","title":"Want to contribute ?"},{"location":"api_reference/","text":"API reference \u00b6 In general, help(symbol) will provide the latest up-to-date documentation. 1. Mixin basics \u00b6","title":"API reference"},{"location":"api_reference/#api-reference","text":"In general, help(symbol) will provide the latest up-to-date documentation.","title":"API reference"},{"location":"api_reference/#1-mixin-basics","text":"","title":"1. Mixin basics"},{"location":"changelog/","text":"Changelog \u00b6 0.2.1 - bugfix \u00b6 Fixed #4 . 0.2.0 - field improvements \u00b6 New type argument in field to declare the type of a field. If provided, the descriptor will not be replaced with a native field, and the type will be checked on every value modification. A TypeError will be raised if type does not comply. Type hints are correctly defined so that IDEs can pick them. Fixes #3 New use_descriptor argument in field to force use a descriptor instead of a native field. 0.1.0 - First public version \u00b6 Mix-in basics : field class to easily define class fields in a mixin without defining a __init__ . @apply_mixins decorator to apply mixins to a class without inheritance, by copying members (=\"monkeypatching\") Light documentation","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#021-bugfix","text":"Fixed #4 .","title":"0.2.1 - bugfix"},{"location":"changelog/#020-field-improvements","text":"New type argument in field to declare the type of a field. If provided, the descriptor will not be replaced with a native field, and the type will be checked on every value modification. A TypeError will be raised if type does not comply. Type hints are correctly defined so that IDEs can pick them. Fixes #3 New use_descriptor argument in field to force use a descriptor instead of a native field.","title":"0.2.0 - field improvements"},{"location":"changelog/#010-first-public-version","text":"Mix-in basics : field class to easily define class fields in a mixin without defining a __init__ . @apply_mixins decorator to apply mixins to a class without inheritance, by copying members (=\"monkeypatching\") Light documentation","title":"0.1.0 - First public version"},{"location":"long_description/","text":"python-mixture \u00b6 Mixin classes for great objects ! The documentation for users is available here: https://smarie.github.io/python-mixture/ A readme for developers is available here: https://github.com/smarie/python-mixture","title":"python-mixture"},{"location":"long_description/#python-mixture","text":"Mixin classes for great objects ! The documentation for users is available here: https://smarie.github.io/python-mixture/ A readme for developers is available here: https://github.com/smarie/python-mixture","title":"python-mixture"}]}